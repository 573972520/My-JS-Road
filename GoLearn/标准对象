<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>对象</title>
	<script type="text/javascript">
	'use strict;';
		/*---------*/
		/*标准对象*/
		/*-------*/

		//用typeof操作符获取对象的类型，它总是返回一个字符串：
		console.log(typeof(Object));   //
		console.log(typeof(Array)); 
		console.log(typeof(Function));
		console.log(typeof(123)); //number
		console.log(typeof(NaN));  //number
		console.log(typeof('str'));  //string
		console.log(typeof(''));    //string
		console.log(typeof(true));   //boolean
		console.log(typeof(false));  //boolean
		console.log(typeof(Math.abs));  //function
		console.log(typeof(undefined)); //undefined
		console.log(typeof(null));   //object
		console.log(typeof([]));     //object
		console.log(typeof({}));    //object
		//如果我们用typeof将无法区分出null、Array和通常意义上的object——{}
		
		/*---------*/
		/*包装对象--number、boolean和string都有包装对象。在JavaScript中，字符串也区分string类型和它的包装类型。包装对象用new创建*/
		/*-------*/
		var n = new Number(54);
		var b = new Boolean(true);
		var a = new String('str');
		console.log(typeof(n));//object
		console.log(typeof(b));//object
		console.log(typeof(a));//object
		//虽然包装对象看上去和原来的值一模一样，显示出来也是一模一样，但他们的类型已经变为object了！所以，包装对象和原始值用===比较会返回false：
		console.log(n===54);  //flase
		//所以闲的蛋疼也不要使用包装对象！尤其是针对string类型！！！
		
		//当我们在使用Number、Boolean和String时，没有写new会发生什么情况？
		var n = Number(54);
		var b = Boolean(true);
		var s = String('str');
		console.log(typeof(n));//Number
		console.log(typeof(b));//Boolean
		console.log(typeof(s));//String

		var n = Number('123'); // 123，相当于parseInt()或parseFloat()
		typeof n; // 'number'

		var b = Boolean('true'); // true
		typeof b; // 'boolean'

		var b2 = Boolean('false'); // true! 'false'字符串转换结果为true！因为它是非空字符串！
		var b3 = Boolean(''); // false

		var s = String(123.45); // '123.45'
		typeof s; // 'string'

		//注意点
		/*
		（1）不要使用new Number()、new Boolean()、new String()创建包装对象；

		（2）用parseInt()或parseFloat()来转换任意类型到number；

		（3）用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；

		（4）通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；

		（5）typeof操作符可以判断出number、boolean、string、function和undefined；

		（6）判断Array要使用Array.isArray(arr)；

		（7）判断null请使用myVar === null；

		（8）判断某个全局变量是否存在用typeof window.myVar === 'undefined'；

		（9）函数内部判断某个变量是否存在用typeof myVar === 'undefined'。
		 */
		
		//number对象调用toString()报SyntaxError：
		console.log(123.toString());// SyntaxError(报错)
		console.log(123..toString());  //123
		console.log((123).toString()); //123
	</script>
</head>
<body>
	
</body>
</html>